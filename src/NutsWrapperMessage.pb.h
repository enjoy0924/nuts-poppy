// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NutsWrapperMessage.proto

#ifndef PROTOBUF_NutsWrapperMessage_2eproto__INCLUDED
#define PROTOBUF_NutsWrapperMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NutsWrapperMessage_2eproto();
void protobuf_AssignDesc_NutsWrapperMessage_2eproto();
void protobuf_ShutdownFile_NutsWrapperMessage_2eproto();

class NutsWrapperMessage;

enum MessageType {
  UNKNOWN_MSGTYPE = 0,
  REQUEST_WITH_RSP = 1,
  REQUEST_WITHOUT_RSP = 2,
  RESPONSE_NORMAL = 3,
  RESPONSE_TIMEOUT = 4
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = UNKNOWN_MSGTYPE;
const MessageType MessageType_MAX = RESPONSE_TIMEOUT;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class NutsWrapperMessage : public ::google::protobuf::Message {
 public:
  NutsWrapperMessage();
  virtual ~NutsWrapperMessage();

  NutsWrapperMessage(const NutsWrapperMessage& from);

  inline NutsWrapperMessage& operator=(const NutsWrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NutsWrapperMessage& default_instance();

  void Swap(NutsWrapperMessage* other);

  // implements Message ----------------------------------------------

  NutsWrapperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NutsWrapperMessage& from);
  void MergeFrom(const NutsWrapperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MessageType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MessageType type() const;
  inline void set_type(::MessageType value);

  // required uint32 SequenceNum = 2;
  inline bool has_sequencenum() const;
  inline void clear_sequencenum();
  static const int kSequenceNumFieldNumber = 2;
  inline ::google::protobuf::uint32 sequencenum() const;
  inline void set_sequencenum(::google::protobuf::uint32 value);

  // repeated uint32 Route = 3;
  inline int route_size() const;
  inline void clear_route();
  static const int kRouteFieldNumber = 3;
  inline ::google::protobuf::uint32 route(int index) const;
  inline void set_route(int index, ::google::protobuf::uint32 value);
  inline void add_route(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      route() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_route();

  // optional uint32 Source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);

  // optional uint32 Destination = 5;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 5;
  inline ::google::protobuf::uint32 destination() const;
  inline void set_destination(::google::protobuf::uint32 value);

  // optional string MessageName = 6;
  inline bool has_messagename() const;
  inline void clear_messagename();
  static const int kMessageNameFieldNumber = 6;
  inline const ::std::string& messagename() const;
  inline void set_messagename(const ::std::string& value);
  inline void set_messagename(const char* value);
  inline void set_messagename(const char* value, size_t size);
  inline ::std::string* mutable_messagename();
  inline ::std::string* release_messagename();
  inline void set_allocated_messagename(::std::string* messagename);

  // required uint64 MessageCode = 7;
  inline bool has_messagecode() const;
  inline void clear_messagecode();
  static const int kMessageCodeFieldNumber = 7;
  inline ::google::protobuf::uint64 messagecode() const;
  inline void set_messagecode(::google::protobuf::uint64 value);

  // required bytes MessageEntity = 8;
  inline bool has_messageentity() const;
  inline void clear_messageentity();
  static const int kMessageEntityFieldNumber = 8;
  inline const ::std::string& messageentity() const;
  inline void set_messageentity(const ::std::string& value);
  inline void set_messageentity(const char* value);
  inline void set_messageentity(const void* value, size_t size);
  inline ::std::string* mutable_messageentity();
  inline ::std::string* release_messageentity();
  inline void set_allocated_messageentity(::std::string* messageentity);

  // @@protoc_insertion_point(class_scope:NutsWrapperMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequencenum();
  inline void clear_has_sequencenum();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_messagename();
  inline void clear_has_messagename();
  inline void set_has_messagecode();
  inline void clear_has_messagecode();
  inline void set_has_messageentity();
  inline void clear_has_messageentity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 sequencenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > route_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 destination_;
  ::std::string* messagename_;
  ::google::protobuf::uint64 messagecode_;
  ::std::string* messageentity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_NutsWrapperMessage_2eproto();
  friend void protobuf_AssignDesc_NutsWrapperMessage_2eproto();
  friend void protobuf_ShutdownFile_NutsWrapperMessage_2eproto();

  void InitAsDefaultInstance();
  static NutsWrapperMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// NutsWrapperMessage

// required .MessageType Type = 1;
inline bool NutsWrapperMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NutsWrapperMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NutsWrapperMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NutsWrapperMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::MessageType NutsWrapperMessage::type() const {
  return static_cast< ::MessageType >(type_);
}
inline void NutsWrapperMessage::set_type(::MessageType value) {
  assert(::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 SequenceNum = 2;
inline bool NutsWrapperMessage::has_sequencenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NutsWrapperMessage::set_has_sequencenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NutsWrapperMessage::clear_has_sequencenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NutsWrapperMessage::clear_sequencenum() {
  sequencenum_ = 0u;
  clear_has_sequencenum();
}
inline ::google::protobuf::uint32 NutsWrapperMessage::sequencenum() const {
  return sequencenum_;
}
inline void NutsWrapperMessage::set_sequencenum(::google::protobuf::uint32 value) {
  set_has_sequencenum();
  sequencenum_ = value;
}

// repeated uint32 Route = 3;
inline int NutsWrapperMessage::route_size() const {
  return route_.size();
}
inline void NutsWrapperMessage::clear_route() {
  route_.Clear();
}
inline ::google::protobuf::uint32 NutsWrapperMessage::route(int index) const {
  return route_.Get(index);
}
inline void NutsWrapperMessage::set_route(int index, ::google::protobuf::uint32 value) {
  route_.Set(index, value);
}
inline void NutsWrapperMessage::add_route(::google::protobuf::uint32 value) {
  route_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NutsWrapperMessage::route() const {
  return route_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NutsWrapperMessage::mutable_route() {
  return &route_;
}

// optional uint32 Source = 4;
inline bool NutsWrapperMessage::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NutsWrapperMessage::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NutsWrapperMessage::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NutsWrapperMessage::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 NutsWrapperMessage::source() const {
  return source_;
}
inline void NutsWrapperMessage::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
}

// optional uint32 Destination = 5;
inline bool NutsWrapperMessage::has_destination() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NutsWrapperMessage::set_has_destination() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NutsWrapperMessage::clear_has_destination() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NutsWrapperMessage::clear_destination() {
  destination_ = 0u;
  clear_has_destination();
}
inline ::google::protobuf::uint32 NutsWrapperMessage::destination() const {
  return destination_;
}
inline void NutsWrapperMessage::set_destination(::google::protobuf::uint32 value) {
  set_has_destination();
  destination_ = value;
}

// optional string MessageName = 6;
inline bool NutsWrapperMessage::has_messagename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NutsWrapperMessage::set_has_messagename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NutsWrapperMessage::clear_has_messagename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NutsWrapperMessage::clear_messagename() {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    messagename_->clear();
  }
  clear_has_messagename();
}
inline const ::std::string& NutsWrapperMessage::messagename() const {
  return *messagename_;
}
inline void NutsWrapperMessage::set_messagename(const ::std::string& value) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(value);
}
inline void NutsWrapperMessage::set_messagename(const char* value) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(value);
}
inline void NutsWrapperMessage::set_messagename(const char* value, size_t size) {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  messagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NutsWrapperMessage::mutable_messagename() {
  set_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    messagename_ = new ::std::string;
  }
  return messagename_;
}
inline ::std::string* NutsWrapperMessage::release_messagename() {
  clear_has_messagename();
  if (messagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagename_;
    messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NutsWrapperMessage::set_allocated_messagename(::std::string* messagename) {
  if (messagename_ != &::google::protobuf::internal::kEmptyString) {
    delete messagename_;
  }
  if (messagename) {
    set_has_messagename();
    messagename_ = messagename;
  } else {
    clear_has_messagename();
    messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 MessageCode = 7;
inline bool NutsWrapperMessage::has_messagecode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NutsWrapperMessage::set_has_messagecode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NutsWrapperMessage::clear_has_messagecode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NutsWrapperMessage::clear_messagecode() {
  messagecode_ = GOOGLE_ULONGLONG(0);
  clear_has_messagecode();
}
inline ::google::protobuf::uint64 NutsWrapperMessage::messagecode() const {
  return messagecode_;
}
inline void NutsWrapperMessage::set_messagecode(::google::protobuf::uint64 value) {
  set_has_messagecode();
  messagecode_ = value;
}

// required bytes MessageEntity = 8;
inline bool NutsWrapperMessage::has_messageentity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NutsWrapperMessage::set_has_messageentity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NutsWrapperMessage::clear_has_messageentity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NutsWrapperMessage::clear_messageentity() {
  if (messageentity_ != &::google::protobuf::internal::kEmptyString) {
    messageentity_->clear();
  }
  clear_has_messageentity();
}
inline const ::std::string& NutsWrapperMessage::messageentity() const {
  return *messageentity_;
}
inline void NutsWrapperMessage::set_messageentity(const ::std::string& value) {
  set_has_messageentity();
  if (messageentity_ == &::google::protobuf::internal::kEmptyString) {
    messageentity_ = new ::std::string;
  }
  messageentity_->assign(value);
}
inline void NutsWrapperMessage::set_messageentity(const char* value) {
  set_has_messageentity();
  if (messageentity_ == &::google::protobuf::internal::kEmptyString) {
    messageentity_ = new ::std::string;
  }
  messageentity_->assign(value);
}
inline void NutsWrapperMessage::set_messageentity(const void* value, size_t size) {
  set_has_messageentity();
  if (messageentity_ == &::google::protobuf::internal::kEmptyString) {
    messageentity_ = new ::std::string;
  }
  messageentity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NutsWrapperMessage::mutable_messageentity() {
  set_has_messageentity();
  if (messageentity_ == &::google::protobuf::internal::kEmptyString) {
    messageentity_ = new ::std::string;
  }
  return messageentity_;
}
inline ::std::string* NutsWrapperMessage::release_messageentity() {
  clear_has_messageentity();
  if (messageentity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageentity_;
    messageentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NutsWrapperMessage::set_allocated_messageentity(::std::string* messageentity) {
  if (messageentity_ != &::google::protobuf::internal::kEmptyString) {
    delete messageentity_;
  }
  if (messageentity) {
    set_has_messageentity();
    messageentity_ = messageentity;
  } else {
    clear_has_messageentity();
    messageentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NutsWrapperMessage_2eproto__INCLUDED
